tensao_casas <- c(110, 220, 110, 110, 110, 110, 220)
print(tensao_casas)
summary(tensao_casas)
tensao_casas_fator <- as.factor (tensao_casas)
print(tensao_casas_fator)
summary(tensao_casas_fator)
table(tensao_casas)
?matrix
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=TRUE)
print(matriz)
print(matriz)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=FALSE)
print(matriz)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,bycol=TRUE)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=TRUE)
mes_numero <- c(1,2,3,4,5,6,7,8,9,10,11,12)
mes_nome <- c("janeiro","fevereiro","mar?o","abril","maio","junho","julho",
"agosto","setembro","outubro","novembro","dezembro")
ano <- c(2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021)
data.frame(mes_numero,mes_nome,ano)
data_frame <- data.frame(mes_numero,mes_nome,ano)
View(data_frame)
# Data Frames pertencentes ao R
df <- mtcars
df
View(mtcars)
nome <- c("Luciano","Pedro","Joyce", "Maria")
idade <- c(46, 38, 27, 29)
curso <- c("Estat?stica", "Linguagem R", "Redes Neurais", "Python")
lista <- list(nome, idade, curso)
print(lista)
# objeto da lista, basta colocar entre colchetes.
lista[1]
lista2 <- list(nome = c("Luciano","Pedro","Joyce", "Maria"),
idade = c(46, 38, 27, 29),
curso = c("Estat?stica","Linguagem R","Redes Neurais","Python"))
lista2
lista2[3]
?Foreign
# BAIXAR PACOTES, CASO ELES AINDA N?O ESTEJAM BAIXADOS
install.packages("argo")
# CARREGAR PACOTES
library(argo)
??argo
#Play Golf
# Import libraries
library(shiny)
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
View(weather)
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
install.packages("data.table")
library(shiny); runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
install.packages("randomForest")
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
#Play Golf
# Import libraries
library(shiny)
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
library(shiny)
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
install.packages("randomForest")
library(shiny); runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
View(weather)
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
library(randomForest)
install.packages("shiny")
library(shiny)
install.packages("shinythemes")
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
install.packages("shiny")
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
install.packages("dplyr")
library(dplyr)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
install.packages("dplyr")
library(dplyr)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("shiny")
library(shiny)
install.packages("flexdashboard")
library(flexdashboard)
install.packages("shiny")
shiny::runApp('E:/ACADEMY/R/SHINY Pack/Practice/Exercicios/GraficosShiny/Shiny23')
runApp('E:/ACADEMY/R/SHINY Pack/Practice/Exercicios/GraficosShiny/Shiny23')
install.packages("tidyverse")
library(tidyverse)
library(shiny)
ui <- fluidPage(
plotOutput("grf1", width = "60%")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$grf1 <- renderPlot(plot(0:10))
}
# Run the application
shinyApp(ui = ui, server = server)
# Dados
dados <- data.frame(
Avaliacao = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"),
Media = c(42, 59, 75),
Min = c(41, 43, 63),
Max = c(53, 73, 85)
)
# Especificar a ordem das categorias
dados$Avaliacao <- factor(dados$Avaliacao, levels = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"))
# Cria o gráfico
library(ggplot2)
ggplot(dados, aes(x = Avaliacao, y = Media)) +
geom_point(aes(color = Avaliacao), size = 5) +
geom_pointrange(aes(ymin = Min, ymax = Max, color = Avaliacao), fatten = 2, size = 1) +
labs(title = "Médias das Avaliações com intervalos de confiança",
x = "Avaliação",
y = "Média") +
theme_minimal() +
theme(axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
text = element_text(size = 18),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
geom_text(aes(label = paste0(Media, "%")), vjust = -0.5, size = 6) +
scale_color_manual(values = c("Primeira Avaliação" = "#5cd6c7", "Segunda Avaliação" = "#f77333", "Avaliação Final" = "#9442d4")) +
geom_text(data = subset(dados, Min == Media), aes(label = "x", y = Min), size = 5, vjust = -1, hjust = 0.5) +
geom_text(data = subset(dados, Max == Media), aes(label = "x", y = Max), size = 5, vjust = 1, hjust = 0.5)
# Dados
dados <- data.frame(
Avaliacao = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"),
Media = c(42, 59, 75),
Min = c(41, 43, 63),
Max = c(53, 73, 85)
)
# Especificar a ordem das categorias
dados$Avaliacao <- factor(dados$Avaliacao, levels = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"))
# Cria o gráfico
library(ggplot2)
ggplot(dados, aes(x = Avaliacao, y = Media)) +
geom_point(aes(color = Avaliacao), size = 5) +
geom_pointrange(aes(ymin = Min, ymax = Max, color = Avaliacao), fatten = 2, size = 1) +
labs(title = "Médias das Avaliações",
x = "Avaliação",
y = "Média") +
theme_minimal() +
theme(axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
text = element_text(size = 18),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
geom_text(aes(label = paste0(Media, "%")), vjust = -0.5, size = 6) +
scale_color_manual(values = c("Primeira Avaliação" = "#5cd6c7", "Segunda Avaliação" = "#f77333", "Avaliação Final" = "#9442d4")) +
geom_text(data = subset(dados, Min == Media), aes(label = "x", y = Min), size = 5, vjust = -1, hjust = 0.5) +
geom_text(data = subset(dados, Max == Media), aes(label = "x", y = Max), size = 5, vjust = 1, hjust = 0.5)
# Dados
dados <- data.frame(
Avaliacao = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"),
Media = c(48, 59, 72),
Min = c(40, 40, 52),
Max = c(72, 76, 88)
)
# Especificar a ordem das categorias
dados$Avaliacao <- factor(dados$Avaliacao, levels = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"))
# Cria o gráfico
library(ggplot2)
ggplot(dados, aes(x = Avaliacao, y = Media)) +
geom_point(aes(color = Avaliacao), size = 5) +
geom_pointrange(aes(ymin = Min, ymax = Max, color = Avaliacao), fatten = 2, size = 1) +
labs(title = "Médias das Avaliações",
x = "Avaliação",
y = "Média") +
theme_minimal() +
theme(axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
text = element_text(size = 18),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
geom_text(aes(label = paste0(Media, "%")), vjust = -0.5, size = 6) +
scale_color_manual(values = c("Primeira Avaliação" = "#5cd6c7", "Segunda Avaliação" = "#f77333", "Avaliação Final" = "#9442d4")) +
geom_text(data = subset(dados, Min == Media), aes(label = "x", y = Min), size = 5, vjust = -1, hjust = 0.5) +
geom_text(data = subset(dados, Max == Media), aes(label = "x", y = Max), size = 5, vjust = 1, hjust = 0.5)
shiny::runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/mydash')
ls
shiny::runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/Dash1')
setwd("C:/Users/Wilmar Frechauth/Desktop/TRY R/CARROS")
if (!require(dplyr)) install.packages("dplyr")
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(plotly)) install.packages("plotly")
dados <- read.csv("dados_shiny_2022081822.csv")
dados_limpos <- select(dados, -c(5,25))
theme_set(theme_bw())
runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/Dash1')
theme_set(theme_bw())
#Grafico 1 - Linhas
##Médias dos valores ao longo do tempo
modelo <- "corolla xei 16v"
uf <- c("mt", "se")
dados_filtrados <- dados_limpos %>% filter(MODELO == modelo &
UF %in% uf)
mediana_data <- dados_filtrados %>% group_by(DATA_COLETA_METADADOS, UF) %>%
summarise(mediaValor = median(VALOR))
ggplotly(
ggplot(mediana_data)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = mediaValor,
group = UF, color = UF),
size = 1) +
ggtitle("Média dos valores ao longo do tempo")
)
#Gráfico 2 - BoxPlot
#Variação de valores por UF: Min, Max, Mediana/Média, Outliers,
ggplotly(
dados_filtrados %>% ggplot() +
geom_boxplot(aes(x = UF, y = VALOR, fill = UF)) +
ggtitle("Variação dos valores por UF")+
theme(legend.position = 'none')
)
#Gráfico 3 - Pontos
#Variação: KM, VALOR, UF
ggplotly(
dados_filtrados %>% ggplot()+
geom_point(aes(x = QUILOMETRAGEM, y = VALOR, color = UF)) +
ggtitle("Distribuição de VALOR e QUILOMETRAGEM por UF")
)
#Gráfico 4 - BoxPlot
## VARIAÇÃO PREÇOS POR UF E TIPO ANUNCIO(GRÁFICO DE BOXPLOT) com e sem outlier ####
ggplotly(
dados_filtrados %>%
ggplot(aes(x = TIPO_ANUNCIO, y = VALOR,fill = UF))+
geom_boxplot( ) +
theme(legend.position="none")+
ggtitle("Variação do Preço por Tipo de Anúncio")
) %>% layout(boxmode = 'group')
#Gráfico 5 - Pizza
## frequencia por cambio(GRÁFICO DE PIZZA) ####
freq_cambio <- dados_filtrados %>%
group_by(CÂMBIO) %>%
summarise(qtd = n()) %>%
mutate(prop = qtd / sum(qtd) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ggplotly(
freq_cambio %>%
ggplot(aes(x="", y=prop, fill=CÂMBIO)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = paste(CÂMBIO, '\n',round(prop,2),'%') ),
color = "white", size=6)+
ggtitle("Quantidade por Câmbio")
)
runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/Dash1')
ggplotly(
dados_filtrados %>%
group_by(COR) %>%
summarise(QTD = n() ) %>%
ggplot() +
geom_bar(aes(x = reorder(COR,QTD ),y = QTD, fill = QTD), stat = 'identity')+
ggtitle("Quantidade por Cor") + xlab('COR')+
theme(legend.position = 'none'),
tooltip = c('x', 'y')
)
#Gráfico 6 - Pizza
## frequencia por DIREÇÃO(GRÁFICO DE PIZZA) ####
freq_direcao <- dados_filtrados %>%
group_by(DIREÇÃO) %>%
summarise(qtd = n()) %>%
mutate(prop = qtd / sum(qtd) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
freq_direcao %>%
ggplot(aes(x="", y=prop, fill=DIREÇÃO)) +
geom_bar(stat="identity",width=10, size = 1, color = "white") +
coord_polar("y", start=0) +
theme_void() +
geom_text(aes(y = ypos, label = paste0(round(prop,1),'%') ),
color = "white", size=5)+
ggtitle("Quantidade por Direção")
###Refazendo o grafico de Pizza com PLOTLY
plot_ly(freq_direcao, labels = ~DIREÇÃO, values = ~prop  , type = 'pie',
textinfo = 'label+percent',showlegend = FALSE) %>%
layout(title = 'Quantidade por Direção')
freq_cambio <- dados_filtrados %>%
group_by(CÂMBIO) %>%
summarise(qtd = n()) %>%
mutate(prop = qtd / sum(qtd) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ggplotly(
freq_cambio %>%
ggplot(aes(x="", y=prop, fill=CÂMBIO)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = paste(CÂMBIO, '\n',round(prop,2),'%') ),
color = "white", size=6)+
ggtitle("Quantidade por Câmbio")
)
###Refazendo o grafico de Pizza com PLOTLY
plot_ly(freq_cambio, labels = ~CÂMBIO, values = ~prop  , type = 'pie',
textinfo = 'label+percent',showlegend = FALSE) %>%
layout(title = 'Quantidade por Câmbio')
ggplotly(
dados_filtrados %>%
ggplot(aes(x = TIPO_ANUNCIO, y = VALOR,fill = UF))+
geom_boxplot( ) +
theme(legend.position="none")+
ggtitle("Variação do Preço por Tipo de Anúncio")
) %>% layout(boxmode = 'group')
ggplotly(
dados_filtrados %>% ggplot()+
geom_point(aes(x = QUILOMETRAGEM, y = VALOR, color = UF)) +
ggtitle("Distribuição de VALOR e QUILOMETRAGEM por UF")
)
ggplotly(
dados_filtrados %>% ggplot() +
geom_boxplot(aes(x = UF, y = VALOR, fill = UF)) +
ggtitle("Variação dos valores por UF")+
theme(legend.position = 'none')
)
ggplotly(
ggplot(mediana_data)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = mediaValor,
group = UF, color = UF),
size = 1) +
ggtitle("Média dos valores ao longo do tempo")
)
runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/Dash1')
library(shiny)
# Define UI for application that draws a histogram
fluidPage(
# Application title
titlePanel("Dashboard de Vendas de Carros"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
print("Componentes laterais aqui")
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("Graph1_Linhas"),
plotlyOutput("Graph2_BoxPlot"),
plotlyOutput("Graph3_Pontos"),
plotlyOutput("Graph4_BoxPlot"),
plotlyOutput("Graph5_Pizza"),
plotlyOutput("Graph6_Pizza"),
plotlyOutput("Graph7_Barras")
)
)
)
library(shiny)
# Define server logic required to draw a histogram
function(input, output, session) {
#Graf1 - Linhas
output$Graph1_Linhas <- renderPlotly({
mediana_data <- dados_filtrados %>% group_by(DATA_COLETA_METADADOS, UF) %>%
summarise(mediaValor = median(VALOR))
ggplotly(
ggplot(mediana_data)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = mediaValor,
group = UF, color = UF),
size = 1) +
ggtitle("Média dos valores ao longo do tempo")
)
})
#Graf2 - Boxplot
output$Graph2_BoxPlot <- renderPlotly({
ggplotly(
dados_filtrados %>% ggplot() +
geom_boxplot(aes(x = UF, y = VALOR, fill = UF)) +
ggtitle("Variação dos valores por UF")+
theme(legend.position = 'none')
)
})
#Graf3 - Pontos
output$Graph3_Pontos <- renderPlotly({
ggplotly(
dados_filtrados %>% ggplot()+
geom_point(aes(x = QUILOMETRAGEM, y = VALOR, color = UF)) +
ggtitle("Distribuição de VALOR e QUILOMETRAGEM por UF")
)
})
#Graf4 - BoxPlot
output$Graph4_BoxPlot <- renderPlotly({
ggplotly(
dados_filtrados %>%
ggplot(aes(x = TIPO_ANUNCIO, y = VALOR,fill = UF))+
geom_boxplot( ) +
theme(legend.position="none")+
ggtitle("Variação do Preço por Tipo de Anúncio")
) %>% layout(boxmode = 'group')
})
#Graf5 - Pizza
output$Graph5_Pizza <- renderPlotly({
## frequencia por cambio(GRÁFICO DE PIZZA) ####
freq_cambio <- dados_filtrados %>%
group_by(CÂMBIO) %>%
summarise(qtd = n()) %>%
mutate(prop = qtd / sum(qtd) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
###Refazendo o grafico de Pizza com PLOTLY
plot_ly(freq_cambio, labels = ~CÂMBIO, values = ~prop  , type = 'pie',
textinfo = 'label+percent',showlegend = FALSE) %>%
layout(title = 'Quantidade por Câmbio')
})
#Graf6 - Pizza
output$Graph6_Pizza <- renderPlotly({
## frequencia por DIREÇÃO(GRÁFICO DE PIZZA) ####
freq_direcao <- dados_filtrados %>%
group_by(DIREÇÃO) %>%
summarise(qtd = n()) %>%
mutate(prop = qtd / sum(qtd) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
###Refazendo o grafico de Pizza com PLOTLY
plot_ly(freq_direcao, labels = ~DIREÇÃO, values = ~prop  , type = 'pie',
textinfo = 'label+percent',showlegend = FALSE) %>%
layout(title = 'Quantidade por Direção')
})
#Graf7 - Barras
output$Graph7_Barras <- renderPlotly({
## frequencia por cor(GRÁFICO DE barras) ####
ggplotly(
dados_filtrados %>%
group_by(COR) %>%
summarise(QTD = n() ) %>%
ggplot() +
geom_bar(aes(x = reorder(COR,QTD ),y = QTD, fill = QTD), stat = 'identity')+
ggtitle("Quantidade por Cor") + xlab('COR')+
theme(legend.position = 'none'),
tooltip = c('x', 'y')
)
})
}
runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/Dash1')
runApp()
