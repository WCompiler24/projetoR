m <- 4 * 7
# ou
m = 4 * 7
print(m)
m
# numeric: num?rico
# integer: inteiro
# complex: n?mero complexo
# character (string): caractere
# logical (boolean): l?gicos (True e False)
# factor: categorias bem definidas. ex: g?nero (masculino e feminino)
#                                       estado civil(casado, solteiro, vi?vo...)
#                                       ano (2019, 2020, 2021...)
y = 2
mode(y)
class(y)
y <- as.integer(y)
y
class(y)
mode(y)
x = 7.5
class(x)
x <- as.integer(x)
class(x)
x
complexo <- 2i
complexo <- 2i
complexo
mode(complexo)
class(complexo)
caractere <- "palavra"
class(caractere)
mode(caractere)
logica <- TRUE
class(logica)
logica <- "TRUE"
class(logica)
vetor <- c(1,2,3,4,5,6,7)
class(vetor)
vetor <- as.factor(vetor)
class(vetor)
dias <- c("segunda", "ter?a", "quarta", "quinta", "sexta", "s?bado", "domingo")
class(dias)
print(vetor[1:3])
print(vetor[3])
dias <- c("segunda", "ter?a", "quarta", "quinta", "sexta", "s?bado", "domingo")
print(dias[1:3])
print(dias[2:3])
print(dias[2])
print(dias[7])
gastos_dia <- c(400, 300, 100, 500, 150, 430, 70)
gastos_dia
class(gastos_dia)
length(gastos_dia)
ordem_crescente <- sort(gastos_dia)
ordem_crescente
total <- sum(gastos_dia) # soma dos valores do vetor
total
minimo <- min(gastos_dia)
min(gastos_dia)
max(gastos_dia)
maximo <- max(gastos_dia)
maximo
media <- mean(gastos_dia)
media
mean(gastos_dia)
limite <- (gastos_dia <= 300)
limite
limite
intervalo <- (3:8)
intervalo
ordem_crescente <- sort(-gastos_dia)
ordem_crescente
ordem_crescente <- sort(gastos_dia)
ordem_crescente
# Vetor
escolaridade <- c("fundamental", "m?dio", "superior", "m?dio", "superior", "fundamental")
print (escolaridade)
# Fator
escolaridade_fator <- as.factor(escolaridade)
print (escolaridade_fator)
print (escolaridade_fator)
escolaridade[3]
escolaridade_fator[3]
summary (escolaridade)
summary (escolaridade_fator)
table(escolaridade)
tensao_casas <- c(110, 220, 110, 110, 110, 110, 220)
print(tensao_casas)
summary(tensao_casas)
tensao_casas_fator <- as.factor (tensao_casas)
print(tensao_casas_fator)
summary(tensao_casas_fator)
table(tensao_casas)
?matrix
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=TRUE)
print(matriz)
print(matriz)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=FALSE)
print(matriz)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,bycol=TRUE)
matriz <- matrix(c(1,5,10,30,15,8),nrow=3,ncol=2,byrow=TRUE)
mes_numero <- c(1,2,3,4,5,6,7,8,9,10,11,12)
mes_nome <- c("janeiro","fevereiro","mar?o","abril","maio","junho","julho",
"agosto","setembro","outubro","novembro","dezembro")
ano <- c(2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021,2021)
data.frame(mes_numero,mes_nome,ano)
data_frame <- data.frame(mes_numero,mes_nome,ano)
View(data_frame)
# Data Frames pertencentes ao R
df <- mtcars
df
View(mtcars)
nome <- c("Luciano","Pedro","Joyce", "Maria")
idade <- c(46, 38, 27, 29)
curso <- c("Estat?stica", "Linguagem R", "Redes Neurais", "Python")
lista <- list(nome, idade, curso)
print(lista)
# objeto da lista, basta colocar entre colchetes.
lista[1]
lista2 <- list(nome = c("Luciano","Pedro","Joyce", "Maria"),
idade = c(46, 38, 27, 29),
curso = c("Estat?stica","Linguagem R","Redes Neurais","Python"))
lista2
lista2[3]
?Foreign
# BAIXAR PACOTES, CASO ELES AINDA N?O ESTEJAM BAIXADOS
install.packages("argo")
# CARREGAR PACOTES
library(argo)
??argo
#Play Golf
# Import libraries
library(shiny)
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
View(weather)
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
install.packages("data.table")
library(shiny); runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
install.packages("randomForest")
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
#Play Golf
# Import libraries
library(shiny)
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
library(shiny)
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
install.packages("randomForest")
library(shiny); runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
runApp('D:/ACADEMY/R/SHINY Pack/PlayGolf.R')
####################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
# Import libraries
library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
View(weather)
View(weather)
# Build model
model <- randomForest(play ~ ., data = weather, ntree = 500, mtry = 4, importance = TRUE)
library(randomForest)
install.packages("shiny")
library(shiny)
install.packages("shinythemes")
library(shinythemes)
install.packages("data.table")
library(data.table)
install.packages("RCurl")
library(RCurl)
install.packages("randomForest")
library(randomForest)
install.packages("shiny")
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
install.packages("dplyr")
library(dplyr)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
install.packages("dplyr")
library(dplyr)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("shiny")
library(shiny)
install.packages("flexdashboard")
library(flexdashboard)
install.packages("shiny")
shiny::runApp('E:/ACADEMY/R/SHINY Pack/Practice/Exercicios/GraficosShiny/Shiny23')
runApp('E:/ACADEMY/R/SHINY Pack/Practice/Exercicios/GraficosShiny/Shiny23')
install.packages("tidyverse")
library(tidyverse)
library(shiny)
ui <- fluidPage(
plotOutput("grf1", width = "60%")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$grf1 <- renderPlot(plot(0:10))
}
# Run the application
shinyApp(ui = ui, server = server)
# Dados
dados <- data.frame(
Avaliacao = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"),
Media = c(42, 59, 75),
Min = c(41, 43, 63),
Max = c(53, 73, 85)
)
# Especificar a ordem das categorias
dados$Avaliacao <- factor(dados$Avaliacao, levels = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"))
# Cria o gráfico
library(ggplot2)
ggplot(dados, aes(x = Avaliacao, y = Media)) +
geom_point(aes(color = Avaliacao), size = 5) +
geom_pointrange(aes(ymin = Min, ymax = Max, color = Avaliacao), fatten = 2, size = 1) +
labs(title = "Médias das Avaliações com intervalos de confiança",
x = "Avaliação",
y = "Média") +
theme_minimal() +
theme(axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
text = element_text(size = 18),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
geom_text(aes(label = paste0(Media, "%")), vjust = -0.5, size = 6) +
scale_color_manual(values = c("Primeira Avaliação" = "#5cd6c7", "Segunda Avaliação" = "#f77333", "Avaliação Final" = "#9442d4")) +
geom_text(data = subset(dados, Min == Media), aes(label = "x", y = Min), size = 5, vjust = -1, hjust = 0.5) +
geom_text(data = subset(dados, Max == Media), aes(label = "x", y = Max), size = 5, vjust = 1, hjust = 0.5)
# Dados
dados <- data.frame(
Avaliacao = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"),
Media = c(42, 59, 75),
Min = c(41, 43, 63),
Max = c(53, 73, 85)
)
# Especificar a ordem das categorias
dados$Avaliacao <- factor(dados$Avaliacao, levels = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"))
# Cria o gráfico
library(ggplot2)
ggplot(dados, aes(x = Avaliacao, y = Media)) +
geom_point(aes(color = Avaliacao), size = 5) +
geom_pointrange(aes(ymin = Min, ymax = Max, color = Avaliacao), fatten = 2, size = 1) +
labs(title = "Médias das Avaliações",
x = "Avaliação",
y = "Média") +
theme_minimal() +
theme(axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
text = element_text(size = 18),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
geom_text(aes(label = paste0(Media, "%")), vjust = -0.5, size = 6) +
scale_color_manual(values = c("Primeira Avaliação" = "#5cd6c7", "Segunda Avaliação" = "#f77333", "Avaliação Final" = "#9442d4")) +
geom_text(data = subset(dados, Min == Media), aes(label = "x", y = Min), size = 5, vjust = -1, hjust = 0.5) +
geom_text(data = subset(dados, Max == Media), aes(label = "x", y = Max), size = 5, vjust = 1, hjust = 0.5)
# Dados
dados <- data.frame(
Avaliacao = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"),
Media = c(48, 59, 72),
Min = c(40, 40, 52),
Max = c(72, 76, 88)
)
# Especificar a ordem das categorias
dados$Avaliacao <- factor(dados$Avaliacao, levels = c("Primeira Avaliação", "Segunda Avaliação", "Avaliação Final"))
# Cria o gráfico
library(ggplot2)
ggplot(dados, aes(x = Avaliacao, y = Media)) +
geom_point(aes(color = Avaliacao), size = 5) +
geom_pointrange(aes(ymin = Min, ymax = Max, color = Avaliacao), fatten = 2, size = 1) +
labs(title = "Médias das Avaliações",
x = "Avaliação",
y = "Média") +
theme_minimal() +
theme(axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
text = element_text(size = 18),
axis.title = element_text(size = 20),
axis.text = element_text(size = 16),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16)) +
geom_text(aes(label = paste0(Media, "%")), vjust = -0.5, size = 6) +
scale_color_manual(values = c("Primeira Avaliação" = "#5cd6c7", "Segunda Avaliação" = "#f77333", "Avaliação Final" = "#9442d4")) +
geom_text(data = subset(dados, Min == Media), aes(label = "x", y = Min), size = 5, vjust = -1, hjust = 0.5) +
geom_text(data = subset(dados, Max == Media), aes(label = "x", y = Max), size = 5, vjust = 1, hjust = 0.5)
shiny::runApp('C:/Users/Wilmar Frechauth/Desktop/TRY R/mydash')
setwd("C:/Users/Wilmar Frechauth/Desktop/TRY R/CARROS")
if (!require(dplyr)) install.packages("dplyr")
if (!require(ggplot2)) install.packages("ggplot2")
dados <- read.csv("dados_shiny_2022081822.csv")
dados_limpos <- select(dados, -c(5,25))
modelo <- "corolla xei 16v"
uf <- c("mt", "se")
dados_filtrados <- dados_limpos %>% filter(MODELO == modelo &
UF %in% uf)
mediana_data <- dados_filtrados %>% group_by(DATA_COLETA_METADADOS, UF) %>%
summarise(mediaValor = median(VALOR))
ggplot(mediana_data)+
geom_line(aes(x = DATA_COLETA_METADADOS, y = mediaValor,
group = UF, color = UF),
size = 1) +
ggtitle("Média dos valores ao longo do tempo")
dados_filtrados %>% ggplot() +
geom_boxplot(aes(x = UF, y = VALOR, fill = UF)) +
ggtitle("Variação dos valores por UF")
dados_filtrados %>% ggplot()+
geom_point(aes(x = QUILOMETRAGEM, y = VALOR, color = UF)) +
ggtitle("Distribuição de VALOR e QUILOMETRAGEM por UF")
dados_filtrados %>% group_by(CÂMBIO) %>% summarise(qtd = n()) %>% mutate(prop = qtd / sum(qtd))
dados_filtrados %>% ggplot() +
geom_bar(aes(x = CÂMBIO, color = CÂMBIO))
